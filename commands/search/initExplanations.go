package search

import (
	"fmt"
	"time"

	"github.com/diamondburned/arikawa/v3/api"
	"github.com/diamondburned/arikawa/v3/utils/json/option"
	"github.com/starshine-sys/bcr"
)

func (bot *Bot) initExplanations(r *bcr.Router) (out []*bcr.Command) {
	// get explanations *that are marked as being able to be invoked as commands*
	explanations, err := bot.DB.GetCmdExplanations()
	if err != nil {
		bot.Sugar.Error("Error getting explanations:", err)
		return
	}

	for _, e := range explanations {
		// reassign the variable, otherwise we don't send the correct description
		e := e
		// add the command
		out = append(out, r.AddCommand(&bcr.Command{
			Name:    e.Name,
			Aliases: e.Aliases,

			Summary:     fmt.Sprintf("Autogenerated command that posts the explanation for `%v`", e.Name),
			Description: fmt.Sprintf("This command is an alias for `ex %v`.", e.Name),
			Hidden:      true,

			Cooldown: 1 * time.Second,
			Command: func(ctx *bcr.Context) (err error) {
				m := ctx.NewMessage()
				if ctx.Message.Reference != nil {
					m = m.Reference(ctx.Message.Reference.MessageID)

					var o bool = false

					m = m.AllowedMentions(&api.AllowedMentions{
						Parse: []api.AllowedMentionType{api.AllowUserMention},

						RepliedUser: option.Bool(&o),
					})

					if len(ctx.Message.Mentions) > 0 {
						o = true
						m.Data.AllowedMentions.RepliedUser = option.Bool(&o)
					}
				}

				_, err = m.Content(e.Description).Send()
				return err
			},
		}))
	}

	// return all the commands
	return out
}
