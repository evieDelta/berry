// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuildMemberServiceClient is the client API for GuildMemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuildMemberServiceClient interface {
	SendGuildMemberChunk(ctx context.Context, in *SendGuildMemberChunkData, opts ...grpc.CallOption) (*SendGuildMemberChunkResponse, error)
	UpdateGuildMember(ctx context.Context, in *UpdateGuildMemberData, opts ...grpc.CallOption) (*UpdateGuildMemberResponse, error)
	RemoveGuildMember(ctx context.Context, in *RemoveGuildMemberData, opts ...grpc.CallOption) (*RemoveGuildMemberResponse, error)
}

type guildMemberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuildMemberServiceClient(cc grpc.ClientConnInterface) GuildMemberServiceClient {
	return &guildMemberServiceClient{cc}
}

func (c *guildMemberServiceClient) SendGuildMemberChunk(ctx context.Context, in *SendGuildMemberChunkData, opts ...grpc.CallOption) (*SendGuildMemberChunkResponse, error) {
	out := new(SendGuildMemberChunkResponse)
	err := c.cc.Invoke(ctx, "/GuildMemberService/SendGuildMemberChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildMemberServiceClient) UpdateGuildMember(ctx context.Context, in *UpdateGuildMemberData, opts ...grpc.CallOption) (*UpdateGuildMemberResponse, error) {
	out := new(UpdateGuildMemberResponse)
	err := c.cc.Invoke(ctx, "/GuildMemberService/UpdateGuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildMemberServiceClient) RemoveGuildMember(ctx context.Context, in *RemoveGuildMemberData, opts ...grpc.CallOption) (*RemoveGuildMemberResponse, error) {
	out := new(RemoveGuildMemberResponse)
	err := c.cc.Invoke(ctx, "/GuildMemberService/RemoveGuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuildMemberServiceServer is the server API for GuildMemberService service.
// All implementations must embed UnimplementedGuildMemberServiceServer
// for forward compatibility
type GuildMemberServiceServer interface {
	SendGuildMemberChunk(context.Context, *SendGuildMemberChunkData) (*SendGuildMemberChunkResponse, error)
	UpdateGuildMember(context.Context, *UpdateGuildMemberData) (*UpdateGuildMemberResponse, error)
	RemoveGuildMember(context.Context, *RemoveGuildMemberData) (*RemoveGuildMemberResponse, error)
	mustEmbedUnimplementedGuildMemberServiceServer()
}

// UnimplementedGuildMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGuildMemberServiceServer struct {
}

func (UnimplementedGuildMemberServiceServer) SendGuildMemberChunk(context.Context, *SendGuildMemberChunkData) (*SendGuildMemberChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGuildMemberChunk not implemented")
}
func (UnimplementedGuildMemberServiceServer) UpdateGuildMember(context.Context, *UpdateGuildMemberData) (*UpdateGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuildMember not implemented")
}
func (UnimplementedGuildMemberServiceServer) RemoveGuildMember(context.Context, *RemoveGuildMemberData) (*RemoveGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGuildMember not implemented")
}
func (UnimplementedGuildMemberServiceServer) mustEmbedUnimplementedGuildMemberServiceServer() {}

// UnsafeGuildMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuildMemberServiceServer will
// result in compilation errors.
type UnsafeGuildMemberServiceServer interface {
	mustEmbedUnimplementedGuildMemberServiceServer()
}

func RegisterGuildMemberServiceServer(s grpc.ServiceRegistrar, srv GuildMemberServiceServer) {
	s.RegisterService(&GuildMemberService_ServiceDesc, srv)
}

func _GuildMemberService_SendGuildMemberChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGuildMemberChunkData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildMemberServiceServer).SendGuildMemberChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuildMemberService/SendGuildMemberChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildMemberServiceServer).SendGuildMemberChunk(ctx, req.(*SendGuildMemberChunkData))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildMemberService_UpdateGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuildMemberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildMemberServiceServer).UpdateGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuildMemberService/UpdateGuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildMemberServiceServer).UpdateGuildMember(ctx, req.(*UpdateGuildMemberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildMemberService_RemoveGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGuildMemberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildMemberServiceServer).RemoveGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuildMemberService/RemoveGuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildMemberServiceServer).RemoveGuildMember(ctx, req.(*RemoveGuildMemberData))
	}
	return interceptor(ctx, in, info, handler)
}

// GuildMemberService_ServiceDesc is the grpc.ServiceDesc for GuildMemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuildMemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GuildMemberService",
	HandlerType: (*GuildMemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendGuildMemberChunk",
			Handler:    _GuildMemberService_SendGuildMemberChunk_Handler,
		},
		{
			MethodName: "UpdateGuildMember",
			Handler:    _GuildMemberService_UpdateGuildMember_Handler,
		},
		{
			MethodName: "RemoveGuildMember",
			Handler:    _GuildMemberService_RemoveGuildMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/members.proto",
}
